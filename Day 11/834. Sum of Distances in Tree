TC: O(n^2)
SC: using a tm as well

class Solution {
    public int[] sumOfDistancesInTree(int n, int[][] edges)
    {
        TreeMap<Integer, ArrayList<Integer>> tm = new TreeMap<>();
        int[] ans = new int[n];
        if(n==1)
            return ans;
        //filling our treeMap 
        for(int i=0;i<edges.length;i++)
        {
            if(!tm.containsKey(edges[i][0]))
                tm.put(edges[i][0],new ArrayList<>());
            tm.get(edges[i][0]).add(edges[i][1]);
            
            if(!tm.containsKey(edges[i][1]))
                tm.put(edges[i][1],new ArrayList<>());
            tm.get(edges[i][1]).add(edges[i][0]);
        }
        
        for(int i=0;i<n;i++)
            ans[i] = bfs(i,n,tm);
        return ans;
    }
    
    class Pair
    {
        int src;
        int p;
        Pair(int src, int p)
        {
            this.src = src;
            this.p = p;
        }
    }
    
    public int bfs(int src, int n, TreeMap<Integer, ArrayList<Integer>> tm)
    {
        boolean[] visited = new boolean[n];
        Queue<Pair> q = new ArrayDeque<>();
        q.add(new Pair(src,0));
        int sum = 0;
        
        while(!q.isEmpty())
        {
            Pair rem = q.remove();
            
            if(visited[rem.src] == true)
                continue;
            
            visited[rem.src]=true;
            sum+=rem.p;
            
            ArrayList<Integer> al = tm.get(rem.src);
            for(int i=0;i<al.size();i++)
            {
                if(visited[al.get(i)]==false)
                    q.add(new Pair(al.get(i),(rem.p)+1));
            }
        }
        return sum;
    }
}

//Rather than againa nd again passing tm, make it gloabal
class Solution {
    TreeMap<Integer, ArrayList<Integer>> tm;
    public int[] sumOfDistancesInTree(int n, int[][] edges)
    {
        tm = new TreeMap<>();
        int[] ans = new int[n];
        if(n==1)
            return ans;
        //filling our treeMap 
        for(int i=0;i<edges.length;i++)
        {
            if(!tm.containsKey(edges[i][0]))
                tm.put(edges[i][0],new ArrayList<>());
            tm.get(edges[i][0]).add(edges[i][1]);
            
            if(!tm.containsKey(edges[i][1]))
                tm.put(edges[i][1],new ArrayList<>());
            tm.get(edges[i][1]).add(edges[i][0]);
        }
        
        for(int i=0;i<n;i++)
            ans[i] = bfs(i,n);
        return ans;
    }
    
    class Pair
    {
        int src;
        int p;
        Pair(int src, int p)
        {
            this.src = src;
            this.p = p;
        }
    }
    
    public int bfs(int src, int n)
    {
        boolean[] visited = new boolean[n];
        Queue<Pair> q = new ArrayDeque<>();
        q.add(new Pair(src,0));
        int sum = 0;
        
        while(!q.isEmpty())
        {
            Pair rem = q.remove();
            
            if(visited[rem.src] == true)
                continue;
            
            visited[rem.src]=true;
            sum+=rem.p;
            
            ArrayList<Integer> al = tm.get(rem.src);
            for(int i=0;i<al.size();i++)
            {
                if(visited[al.get(i)]==false)
                    q.add(new Pair(al.get(i),(rem.p)+1));
            }
        }
        return sum;
    }
}
