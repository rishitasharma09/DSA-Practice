class Solution {
    public int maxChunksToSorted(int[] arr) 
    {
        int n = arr.length;
        
//         METHOD 1: O(n) A(n)
        
//         int max[] = new int[n];
//         int min[] = new int[n];
        
//         max[0]=arr[0];
//         for(int i=1;i<n;i++)
//         {
//            if(arr[i]>=max[i-1])
//                max[i]=arr[i];
//             else
//                 max[i]=max[i-1];
//         }
        
//         min[n-1]=arr[n-1];
//         for(int i=n-2;i>=0;i--)
//         {
//             if(arr[i]<=min[i+1])
//                 min[i]=arr[i];
//             else
//                 min[i]=min[i+1];
//         }
        
//         int chunks=0;
//         for(int i=0;i<n-1;i++)
//         {
//             if(max[i]<=min[i+1])
//                 chunks++;
//         }
//         chunks+=1;
//         return chunks;
        
//      METHOD 2: O(nlogn) A(n)  ----> not for duplicate elements
        
        int sorted[] = new int[n];
        // for(int i=0;i<n;i++)
        //     sorted[i]=arr[i];
        Arrays.copy
        Arrays.sort(sorted);
        
        HashMap<Integer, Integer> h = new HashMap<>();
        for(int i=0;i<n;i++)
        {
            h.put(sorted[i],i);
        }
        for(int i=0;i<n;i++)
        {
            arr[i] = h.get(arr[i]);
        }
        
        int max = arr[0], chunks=0;
        
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>max)
                max=arr[i];
            if(i==max)
                chunks++;
        }
        
        return chunks;
    }
}
