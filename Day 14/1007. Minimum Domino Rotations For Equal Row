class Solution {
    public int minDominoRotations(int[] tops, int[] bottoms) 
    {
        
        // TC: O(n)   SC: O(1)
        int aa=0, ab=0, bb=0, ba=0;
        
        for(int i=0;i<tops.length;i++)
        {
            if(aa!=Integer.MAX_VALUE && tops[i]!=tops[0])
            {
                if(bottoms[i]==tops[0])
                    aa++;
                else
                    aa=Integer.MAX_VALUE;
            }
            
            if(ab!=Integer.MAX_VALUE && tops[i]!=bottoms[0])
            {
                if(bottoms[i]==bottoms[0])
                    ab++;
                else
                    ab=Integer.MAX_VALUE;
            }
            
            if(ba!=Integer.MAX_VALUE && bottoms[i]!=tops[0])
            {
                if(tops[i]==tops[0])
                    ba++;
                else
                    ba=Integer.MAX_VALUE;
            }
            
            if(bb!=Integer.MAX_VALUE && bottoms[i]!=bottoms[0])
            {
                if(tops[i]==bottoms[0])
                    bb++;
                else
                    bb=Integer.MAX_VALUE;
            }
            
            //tc increases only iwth this step
            // if(aa==Integer.MAX_VALUE && ab==Integer.MAX_VALUE && ba==Integer.MAX_VALUE && bb==Integer.MAX_VALUE)
            //     break;
            
        }
        
        int min = Math.min(aa, Math.min(ab, Math.min(ba, bb)));
        if(min!=Integer.MAX_VALUE)
            return min;
        return -1;
    }
}
