class MinStack {

    /** initialize your data structure here. */
    Stack<Long> st = new Stack<>();
    long min = Long.MAX_VALUE;
    
    public MinStack() {
        // Stack<Long> st = new Stack<>();
        // long min = Long.MAX_VALUE;
    }
    
    public void push(int val) 
    {
        if(st.isEmpty())
            min = val;
        
        long stVal = val - min;
        st.push(stVal);
        
        if(stVal < 0) //val < min
            min = val;
    }
    
    public void pop()
    {
        long temp = st.pop();
        
        if(temp >= 0)
            System.out.println(temp + min);
        else
        {
            System.out.println(min);
            min = min + Math.abs(temp);
        }
    }
    
    public int top() 
    {
        long temp = st.peek();
        
        if(temp>=0)
            return (int)(temp+min);
        else
            return (int)min;
    }
    
    public int getMin() 
    {
        return (int)min;
    }
    
    
// - testcase in which Integer stack is not working   ["MinStack","push","push","push","top","pop","getMin","pop","getMin","pop","push","top","getMin","push","top","getMin","pop","getMin"]
// [[],[2147483646],[2147483646],[2147483647],[],[],[],[],[],[],[2147483647],[],[],[-2147483648],[],[],[],[]]
    
//     Stack<Integer> st = new Stack<>();
//     int min = Integer.MAX_VALUE;
//     public MinStack() {
        
//     }
    
//     public void push(int val) 
//     {
//         if(st.isEmpty())
//             min = val;
        
//         int stVal = val - min;
//         st.push(stVal);
        
//         if(stVal < 0) //val < min
//             min = val;
//     }
    
//     public void pop()
//     {
//         int temp = st.pop();
        
//         if(temp >= 0)
//         {
//             System.out.println(temp + min);
//             // if(st.isEmpty())  ---> this condition is mananged by push
//             //     min = Integer.MAX_VALUE;
//         }
            
//         else
//         {
//             System.out.println(min);
//             min = min + Math.abs(temp);
//         }
//     }
    
//     public int top() 
//     {
//         int temp = st.peek();
        
//         if(temp>=0)
//             return (temp+min);
//         else
//             return min;
//     }
    
//     public int getMin() 
//     {
//         return min;
//     }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
