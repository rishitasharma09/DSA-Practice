class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2)
    {
        // HashMap<Integer, Integer> hm = new HashMap<>();
        // int ans[] = new int[nums2.length];
        // Stack<Integer> st = new Stack<>();
        // for(int i=0;i<nums2.length;i++)
        // {
        //     while(!st.isEmpty() && nums2[i]>nums2[st.peek()])
        //     {
        //         ans[st.peek()] = nums2[i];
        //         st.pop();
        //     }
        //     st.push(i);
        // }
        // while(!st.isEmpty())
        // {
        //     ans[st.pop()] = -1;
        // }
        // for(int i=0;i<nums2.length;i++)
        // {
        //     hm.put(nums2[i],ans[i]);
        // }
        // int fans[] = new int[nums1.length];
        // for(int i=0;i<nums1.length;i++)
        // {
        //     fans[i] = hm.get(nums1[i]);
        // }
        // return fans;
        
        HashMap<Integer, Integer> hm = new HashMap<>();
        int ans[] = new int[nums1.length];
        Stack<Integer> st = new Stack<>();
        
        for(int i=0;i<nums2.length;i++)
        {
            while(!st.isEmpty() && nums2[i]>st.peek())
                hm.put(st.pop(), nums2[i]);
            st.push(nums2[i]);
        }
        
        for(int i=0;i<nums1.length;i++)
        {
            ans[i] = hm.getOrDefault(nums1[i],-1);
        }
        return ans;
    }
}
