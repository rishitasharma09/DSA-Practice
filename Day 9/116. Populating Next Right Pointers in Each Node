/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) 
    {
        if(root==null)
            return root;
        Node ans = root;
//         Queue<Node> q = new ArrayDeque<>();
//         q.add(root);
        
//         while(q.size()!=0)
//         {
//             int count = q.size();
//             //int temp = count;
//             for(int i=0;i<count;i++)
//             {
//                 Node curr = q.remove();
//                 //temp--;
//                 // if(temp>0)
//                 //     curr.next=q.peek();
//                 // else
//                 //     curr.next=null;
//                 if(i<count-1)
//                     curr.next=q.peek();
//                 else
//                     curr.next=null;
                
                
//                 if(curr.left!=null)
//                     q.add(curr.left);
//                 if(curr.right!=null)
//                     q.add(curr.right);
//             }
            
//         }
//         return root;
        while(root.left!=null)
        {
            Node temp = root;
            while(temp!=null)
            {
               temp.left.next=temp.right;
                if(temp.next!=null)
                    temp.right.next=temp.next.left;
                temp=temp.next;
            }
            root=root.left;
        }
        return ans;
        
    }
}
